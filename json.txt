using System.Text.Json;
using System.Text.Json.Serialization;
using System.Text.Json.Serialization.Metadata;
using System.Text.Encodings.Web;

public interface IChessPiece
{
    void Move(int newX, int newY);
    void Display();
}

[JsonPolymorphic]
[JsonDerivedType(typeof(Pawn), nameof(Pawn))]
[JsonDerivedType(typeof(Bishop), nameof(Bishop))]
[JsonDerivedType(typeof(Rook), nameof(Rook))]
[JsonDerivedType(typeof(King), nameof(King))]
public abstract class ChessPiece : IChessPiece
{
    public string Name { get; protected set; }
    public string Color { get; protected set; }
    public int X { get; set; }
    public int Y { get; set; }

    protected ChessPiece() { }

    protected ChessPiece(string name, string color, int x, int y)
    {
        Name = name;
        Color = color;
        X = x;
        Y = y;
    }

    public abstract void Move(int newX, int newY);

    public virtual void Display()
    {
        Console.WriteLine($"Имя: {Name}, Цвет: {Color}, Позиция: ({X}, {Y})");
    }
}

public class ChessPiecesStorage
{
    public List<ChessPiece> Pieces { get; set; } = new List<ChessPiece>();
}

public class Program
{
    private static readonly JsonSerializerOptions JsonOptions = new()
    {
        WriteIndented = true,
        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,
        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
        Encoder = System.Text.Encodings.Web.JavaScriptEncoder.UnsafeRelaxedJsonEscaping,
        TypeInfoResolver = new DefaultJsonTypeInfoResolver
        {
            Modifiers = { AddTypeDiscriminator }
        }
    };

    private static void AddTypeDiscriminator(JsonTypeInfo typeInfo)
    {
        if (typeInfo.Type != typeof(ChessPiece)) return;

        typeInfo.PolymorphismOptions = new JsonPolymorphismOptions
        {
            TypeDiscriminatorPropertyName = "$type",
            IgnoreUnrecognizedTypeDiscriminators = true,
            UnknownDerivedTypeHandling = JsonUnknownDerivedTypeHandling.FailSerialization,
            DerivedTypes =
            {
                new JsonDerivedType(typeof(Pawn), "Pawn"),
                new JsonDerivedType(typeof(Bishop), "Bishop"),
                new JsonDerivedType(typeof(Rook), "Rook"),
                new JsonDerivedType(typeof(King), "King")
            }
        };
    }

    static void Main()
    {
        const string filePath = "chess_pieces.json";
        
        try
        {
            InitializeFile(filePath);

            var pieces = new ChessPiecesStorage
            {
                Pieces =
                {
                    new Pawn("белый", 1, 2),
                    new Bishop("чёрный", 3, 1),
                    new Rook("белый", 1, 1),
                    new King("чёрный", 5, 1)
                }
            };

            Console.Write("Выберите цвет новой пешки (чёрный/белый): ");
            string? color = Console.ReadLine();
            pieces.Pieces.Add(new Pawn(color, 2, 2));

            foreach (var piece in pieces.Pieces)
            {
                piece.Display();
                if(piece.Name == "Пешка" || piece.Name == "Ладья")
                {
                    piece.Move(piece.X, piece.Y + 1);
                }
                else
                {
                    piece.Move(piece.X + 1, piece.Y + 1);
                }
                Console.WriteLine();
            }

            if (pieces.Pieces[0] is Pawn p) p.Promote();
            if (pieces.Pieces[3] is King k && pieces.Pieces[2] is Rook r)
            {
                k.Castling(r);
                k.SetInCheck(true);
                k.Castling(r);
            }

            SavePieces(filePath, pieces);
            Console.WriteLine($"Данные сохранены в файл: {Path.GetFullPath(filePath)}");
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }
    }

    static void InitializeFile(string filePath)
    {
        try
        {
            var directory = Path.GetDirectoryName(filePath);
            if (!string.IsNullOrEmpty(directory)) Directory.CreateDirectory(directory);
            if (File.Exists(filePath)) File.Delete(filePath);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка инициализации файла: {ex.Message}");
            throw;
        }
    }

    static void SavePieces(string filePath, ChessPiecesStorage storage)
    {
        try
        {
            string json = JsonSerializer.Serialize(storage, JsonOptions);
            File.WriteAllText(filePath, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка сохранения: {ex.Message}");
            throw;
        }
    }

    static ChessPiecesStorage LoadPieces(string filePath)
    {
        try
        {
            if (!File.Exists(filePath)) return new ChessPiecesStorage();
            string json = File.ReadAllText(filePath);
            return JsonSerializer.Deserialize<ChessPiecesStorage>(json, JsonOptions) ?? new ChessPiecesStorage();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка загрузки: {ex.Message}");
            return new ChessPiecesStorage();
        }
    }
}

public class Pawn : ChessPiece
{
    public bool IsPromoted { get; set; }

    public Pawn() { }

    public Pawn(string color, int x, int y) 
        : base("Пешка", color, x, y)
    {
        IsPromoted = false;
    }

    public override void Move(int newX, int newY)
    {
        Console.WriteLine($"Пешка передвинулась с ({X},{Y}) на ({newX},{newY})");
        X = newX;
        Y = newY;
    }

    public void Promote()
    {
        IsPromoted = true;
        Console.WriteLine("Пешка повышена в звании!");
    }
}

public class Bishop : ChessPiece
{
    public int DiagonalMoves { get; set; }

    public Bishop() { }

    public Bishop(string color, int x, int y) 
        : base("Слон", color, x, y)
    {
        DiagonalMoves = 0;
    }

    public override void Move(int newX, int newY)
    {
        Console.WriteLine($"Слон ходит по диагонали из ({X},{Y}) в ({newX},{newY})");
        X = newX;
        Y = newY;
        DiagonalMoves++;
    }
}

public class Rook : ChessPiece
{
    public bool CastlingAvailable { get; set; }

    public Rook() { }

    public Rook(string color, int x, int y) 
        : base("Ладья", color, x, y)
    {
        CastlingAvailable = true;
    }

    public override void Move(int newX, int newY)
    {
        Console.WriteLine($"Ладья перемещается прямо из ({X},{Y}) в ({newX},{newY})");
        X = newX;
        Y = newY;
        CastlingAvailable = false;
    }

    public void CastlingMove()
    {
        if (CastlingAvailable)
        {
            Console.WriteLine("Ладья участвует в рокировке");
            CastlingAvailable = false;
        }
        else
        {
            Console.WriteLine("Рокировка больше не доступна для этой ладьи");
        }
    }
}

public class King : ChessPiece
{
    public bool InCheck { get; set; }

    public King() { }

    public King(string color, int x, int y) 
        : base("Король", color, x, y)
    {
        InCheck = false;
    }

    public override void Move(int newX, int newY)
    {
        Console.WriteLine($"Король перемещается на одну клетку из ({X},{Y}) в ({newX},{newY})");
        X = newX;
        Y = newY;
    }

    public void Castling(Rook rook)
    {
        if (!InCheck && rook.CastlingAvailable)
        {
            Console.WriteLine("Рокировка, произведенная между королем и ладьей");
            rook.CastlingMove();
        }
        else
        {
            Console.WriteLine("Рокировка не возможна");
        }
    }

    public void SetInCheck(bool check)
    {
        InCheck = check;
    }
}